<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Mandamientospagosexpedientes;
use DateTime;

/**
 * MandamientospagosexpedientesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MandamientospagosexpedientesRepository extends \Doctrine\ORM\EntityRepository
{
    public function listarMandamientosPagosEnProceso($user)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i  
                WHERE  es.nombreestado != 'SIN CREDITO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = true AND e.pagodirecto = false";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function listarPagosDirectosEnProceso($user)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i  
                WHERE  es.nombreestado != 'SIN CREDITO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = true AND e.pagodirecto = true";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function listarMandamientosPagosProcesados()
    {
        $em = $this->getEntityManager();
        $actual = new \DateTime('now');
        $year = $actual->format('Y-01-01');

        $dql = "SELECT e FROM AppBundle:Expedientes e LEFT JOIN e.mandamientosPagos mpe
                WHERE mpe.fechamandamientopago >= '". $year. "' AND e.mandamientopago = true AND e.activo = false AND e.pagodirecto = false";

        $query = $em->createQuery($dql);
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function listarPagosDirectosProcesados()
    {
        $em = $this->getEntityManager();
        $actual = new \DateTime('now');
        $year = $actual->format('Y-01-01');

        $dql = "SELECT e FROM AppBundle:Expedientes e LEFT JOIN e.mandamientosPagos mpe
                WHERE mpe.fechamandamientopago >= '". $year. "' 
                AND e.mandamientopago = true 
                AND e.activo = false 
                AND e.pagodirecto = true";

        $query = $em->createQuery($dql);
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function agregarMandamientoPago($data , $user)
    {
        try{
            $em = $this->getEntityManager();
            $expediente = $data['expediente'];

            $mandamiemtoPago = new Mandamientospagosexpedientes();
            $mandamiemtoPago->setExpediente($expediente);
            $mandamiemtoPago->setNumeromandamientopago($data['numeroMandamientoPago']);
            $mandamiemtoPago->setImportemandamientopago($data['montoAPagar']);
            $mandamiemtoPago->setFechamandamientopago(new \DateTime($data['fechaMandamientoPago']));
            $em->persist($mandamiemtoPago);

            $data['pagoDirecto'] == '0' ? $expediente->setPagodirecto(false) : $expediente->setPagodirecto(true);
            $expediente->setMandamientopago(true);

            $instancia = $em->getRepository('AppBundle:Instancias')->findOneBy(array('preorden' => '3'));

            $em->getRepository('AppBundle:Expedientes')->cambiarEstadoExpedienteInstancia($expediente , $instancia , 'POR PAGAR');

            /*$estadoExpedienteInstancia = $em->getRepository('AppBundle:Estadosexpedientesinstancias')->find(3);

            $historicoEstadoExpediente1 = $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $estadoExpedienteInstancia , $user);
            if($historicoEstadoExpediente1 != 'ok') return $historicoEstadoExpediente1;*/

            $historicoEstadoExpediente = $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $expediente->getEstadoexpedienteinstancia() , $user);
            if($historicoEstadoExpediente != 'ok') return $historicoEstadoExpediente;

            $em->flush();

            $msg = $mandamiemtoPago;

        }catch (\Exception $e){

            $msg = 'Se produjo un error al insertar el mandamiento de pago';

        }
        return $msg;
    }

    public function aprobarMandamientoPago($data , $user)
    {
        try{
            $em = $this->getEntityManager();
            $expediente = $data['expediente'];
            $mandamiemtosPagos = $expediente->getMandamientosPagos();
            $mandamiemtoPago = $mandamiemtosPagos[count($mandamiemtosPagos) - 1];
            $mandamiemtoPago->setImportemandamientopago($data['montoAPagar']);

            $em->getRepository('AppBundle:Expedientes')->cambiarEstadoExpedienteInstancia($expediente ,$user->getInstancia()  , 'PAGO APROBADO');
            $historicoEstadoExpediente = $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $expediente->getEstadoexpedienteinstancia() , $user);
            if($historicoEstadoExpediente != 'ok') return $historicoEstadoExpediente;

            if($user->getInstancia()->getPreorden() != '4')
            {
                $preorden = $expediente->getEstadoexpedienteinstancia()->getInstancia()->getPreorden() + 1;
                $instancia = $em->getRepository('AppBundle:Instancias')->findOneBy(array('preorden' => $preorden ));
                $em->getRepository('AppBundle:Expedientes')->cambiarEstadoExpedienteInstancia($expediente ,$instancia  , 'POR PAGAR');
                $historicoEstadoExpediente = $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $expediente->getEstadoexpedienteinstancia() , $user);
                if($historicoEstadoExpediente != 'ok') return $historicoEstadoExpediente;
            }else{

                /*$expediente->setMandamientopago(false);*/
                $expediente->setActivo(false);
            }

            $em->persist($expediente);
            $em->flush();
            $msg = $expediente;


        }catch (\Exception $e){

            $msg = 'Se produjo un error al aprobar el mandamiento de pago';
        }

        return $msg;
    }

    public function desestimarMandamientoPago($expediente , $user)
    {
        try{
            $em = $this->getEntityManager();
            $expediente->setActivo(false);
            $em->getRepository('AppBundle:Expedientes')->cambiarEstadoExpedienteInstancia($expediente ,$user->getInstancia() , 'PAGO DESESTIMADO');
            $historicoEstadoExpediente = $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $expediente->getEstadoexpedienteinstancia() , $user);
            if($historicoEstadoExpediente != 'ok') return $historicoEstadoExpediente;

            $em->flush();
            $msg = $expediente;

        }catch (\Exception $e){

            $msg = 'Se produjo un error al desestimar el mandamiento de pago';
        }

        return $msg;
    }

    public function totalMandamientosPagosEnProceso($user)
    {
        $em = $this->getEntityManager();
        $actual = new DateTime();
        $date = $actual->format('Y-01-01');

        $dql = "SELECT SUM(mpe.importemandamientopago) AS total
                FROM AppBundle:Expedientes e   JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i  JOIN e.mandamientosPagos mpe
                WHERE  es.nombreestado != 'SIN CREDITO' 
                AND i.id = :instancia 
                AND e.activo = true 
                AND e.mandamientopago = true 
                AND e.pagodirecto = false
                AND mpe.fechamandamientopago >= :p1 ";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $query->setParameter('p1' , $date);
        $total = $query->getResult();

        return $total[0];
    }

    public function totalPagosDirectosEnProceso($user)
    {
        $em = $this->getEntityManager();
        $actual = new DateTime();
        $date = $actual->format('Y-01-01');

        $dql = "SELECT SUM(mpe.importemandamientopago) AS total
                FROM AppBundle:Expedientes e   JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i  JOIN e.mandamientosPagos mpe
                WHERE  es.nombreestado != 'SIN CREDITO' 
                AND i.id = :instancia 
                AND e.activo = true 
                AND e.mandamientopago = true 
                AND e.pagodirecto = true
                AND mpe.fechamandamientopago >= :p1 ";

        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $query->setParameter('p1' , $date);
        $total = $query->getResult();

        return $total[0];
    }

    public function totalMandamientosPagosProcesados($user)
    {
        $em = $this->getEntityManager();
        $actual = new DateTime();
        $date = $actual->format('Y-01-01');

        $dql = "SELECT SUM(mpe.importemandamientopago) AS total
                FROM AppBundle:Expedientes e   JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i  JOIN e.mandamientosPagos mpe
                WHERE  es.nombreestado != 'SIN CREDITO' 
                AND i.id = :instancia 
                AND e.activo = false 
                AND e.mandamientopago = true 
                AND e.pagodirecto = false
                AND mpe.fechamandamientopago >= :p1 ";

        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $query->setParameter('p1' , $date);
        $total = $query->getResult();

        return $total[0];
    }

    public function totalPagosDirectosProcesados($user)
    {
        $em = $this->getEntityManager();
        $actual = new DateTime();
        $date = $actual->format('Y-01-01');

        $dql = "SELECT SUM(mpe.importemandamientopago) AS total
                FROM AppBundle:Expedientes e   JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i  JOIN e.mandamientosPagos mpe
                WHERE  es.nombreestado != 'SIN CREDITO' 
                AND i.id = :instancia 
                AND e.activo = false 
                AND e.mandamientopago = true 
                AND e.pagodirecto = true
                AND mpe.fechamandamientopago >= :p1 ";

        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $query->setParameter('p1' , $date);
        $total = $query->getResult();

        return $total[0];
    }

}
