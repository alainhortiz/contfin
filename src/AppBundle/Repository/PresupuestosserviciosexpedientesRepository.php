<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Presupuestosserviciosexpedientes;
use AppBundle\Entity\Presupuestosserviciosexpedientesproyectos;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * PresupuestosserviciosexpedientesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PresupuestosserviciosexpedientesRepository extends \Doctrine\ORM\EntityRepository
{
    public function agregarPresupuestoServicioExpediente($expediente , $partidas)
    {
        try{
            $em = $this->getEntityManager();
            $actual = new \DateTime();
            $year = $actual->format('Y');
            foreach ($partidas as $partida)
            {
                if($partida != '')
                {
                    $presupuesServicioExp = new Presupuestosserviciosexpedientes();
                    $presupuesServicioExp->setExpediente($expediente);
                    $presupuesServicioExp->setImportesolicitado($partida['monto']);

                    $servicio = $em->getRepository('AppBundle:Servicios')->find($partida['servicio']);
                    $numeroEconomico = $em->getRepository('AppBundle:Numeroseconomicos')->find($partida['numeroEconomico']);

                    $presupuesServicio = $em->getRepository('AppBundle:Presupuestosservicios')->findOneBy(array('servicio' => $servicio , 'numeroeconomico' => $numeroEconomico , 'anno' => $year));
                    $presupuesServicioExp->setPresupuestoservicio($presupuesServicio);
                    $em->persist($presupuesServicioExp);
                }
            }
            $em->flush();
            $msg = 'ok';

        }catch (\Exception $e){

            $msg = 'Se produjo un error al insertar las partidas presupuestarias ';
        }
        return $msg;
    }

    public function modificarPresupuestoServicioExpediente($expediente , $partidas ,$user)
    {
        try{
            $em = $this->getEntityManager();

            $partidasExpediente = $expediente->getPartidas();
            $lastInstancia = $expediente->getEstadoexpedienteinstancia()->getInstancia()->getPreorden();
            $actual = new \DateTime();
            $year = $actual->format('Y');

            if(  $lastInstancia > 2  and  $expediente->getEstadoexpedienteinstancia()->getEstadoexpediente()->getNombreestado() != 'CREADO' )
            {
                foreach ($partidasExpediente as $partExp)
                {
                    $presupuesto = $partExp->getPresupuestoservicio();
                    $presupuesto->setValordisponible((float)$presupuesto->getValordisponible() - (float)$partExp->getImportesolicitado());
                    $em->persist($presupuesto);
                }
                $em->flush();
            }

            foreach ($partidasExpediente as $part)
            {
                $expediente->removePartida($part);
                $em->persist($expediente);
                $em->remove($part);
            }
            $em->flush();

            $instanciaUser = $user->getInstancia()->getPreorden();

            foreach ($partidas as $partida)
            {
                if($partida != '')
                {
                    $presupuesServicioExp = new Presupuestosserviciosexpedientes();
                    $presupuesServicioExp->setExpediente($expediente);
                    $presupuesServicioExp->setImportesolicitado($partida['monto']);

                    $servicio = $em->getRepository('AppBundle:Servicios')->find($partida['servicio']);
                    $numeroEconomico = $em->getRepository('AppBundle:Numeroseconomicos')->find($partida['numeroEconomico']);
                    $presupuesServicio = $em->getRepository('AppBundle:Presupuestosservicios')->findOneBy(array('servicio' => $servicio , 'numeroeconomico' => $numeroEconomico, 'anno' => $year));
                    $presupuesServicioExp->setPresupuestoservicio($presupuesServicio);
                    $em->persist($presupuesServicioExp);


                    if( $instanciaUser >= 2  or $expediente->getMandamientopago() == true)
                    {
                        $presupuesServicio->setValordisponible((float)$presupuesServicio->getValordisponible() + (float)$partida['monto']);
                        $em->persist($presupuesServicio);
                    }
                    if(isset($partida['proyectos'])) {
                        $proyectos = $partida['proyectos'];
                        foreach ($proyectos as $proyecto) {
                            if ($proyecto != '') {
                                $presupuesServicioProyectoExp = new Presupuestosserviciosexpedientesproyectos();
                                $presupuesServicioProyectoExp->setImportesolicitado($proyecto['monto']);
                                $presupuesServicioProyectoExp->setPresupuestoservicioexpediente($presupuesServicioExp);

                                $presupuestoProyecto = $em->getRepository('AppBundle:Presupuestosproyectos')->find($proyecto['proyecto']);
                                $presupuesServicioProyectoExp->setPresupuestoproyecto($presupuestoProyecto);
                                $em->persist($presupuesServicioProyectoExp);
                                $presupuesServicioExp->addProyecto($presupuesServicioProyectoExp);

                            }
                        }
                    }
                    /*$em->persist($presupuesServicioExp);*/
                    $expediente->addPartida($presupuesServicioExp);
                   /* $em->persist($expediente);*/
                    $em->flush();
                }
            }

            $msg = 'ok';

        }catch (\Exception $e){

            $msg = 'Se produjo un error al modificar las partidas';
        }
        return $msg;
    }

    public function comprobarFondoPartidasExpediente($partidas)
    {
        try{
            $em = $this->getEntityManager();
            $presupuestosExpediente = new ArrayCollection();
            $actual = new \DateTime();
            $year = $actual->format('Y');

            foreach ($partidas as $partida)
            {
                if($partida != '')
                {
                    $servicio = $em->getRepository('AppBundle:Servicios')->find($partida['servicio']);
                    $numeroEconomico = $em->getRepository('AppBundle:Numeroseconomicos')->find($partida['numeroEconomico']);
                    $presupuesServicio = $em->getRepository('AppBundle:Presupuestosservicios')->findOneBy(array('servicio' => $servicio , 'numeroeconomico' => $numeroEconomico , 'anno' => $year));
                    $fondo = (float)$presupuesServicio->getPresupuestounitario() - (float)$presupuesServicio->getValordisponible();
                    if( $fondo < 0 )
                    {
                        $data = array(
                            'presupuesto' => $presupuesServicio,
                            'monto' => $partida['monto'],
                        );

                        $presupuestosExpediente->add($data);
                    }
                }
            }
            if($presupuestosExpediente->isEmpty()) $msg = 'ok';
            else $msg = $presupuestosExpediente;

        }catch (\Exception $e){

            $msg = 'Se produjo un error al comprobar el fondo de las partidas presupuestarias ';
        }
        return $msg;
    }

    //funciones para graficos
    public function graficoExpedientesImportesServicios($expediente)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT s.nombreservicio as servicio, 
                pse.importesolicitado/1000 as importe,
                (ps.presupuesto - (ps.valordisponible)/1000)/1000 as disponiblidad,
                (ps.presupuesto - (ps.valorejecutado)/1000)/1000 as liquidez  
                FROM AppBundle:Presupuestosserviciosexpedientes pse 
                JOIN pse.expediente e
                JOIN pse.presupuestoservicio ps
                JOIN ps.servicio s
                WHERE ps.inactivo = :p1
                AND e.numeroexpediente = :p2
                ORDER BY importe DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' ,false);
        $query->setParameter('p2' , $expediente);

        /** @noinspection OneTimeUseVariablesInspection */
        $importeServiciosExpedientes = $query->setMaxResults(1000)->getResult();


        return $importeServiciosExpedientes;

    }

    public function graficoExpedientesSecciones($seccion)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.numeroexpediente, SUM(pse.importesolicitado) as total
                FROM AppBundle:Presupuestosserviciosexpedientes pse 
                LEFT JOIN pse.expediente e
                LEFT JOIN pse.presupuestoservicio ps
                LEFT JOIN ps.servicio serv
                LEFT JOIN serv.seccion s
                WHERE e.activo = :p1 
                AND s.nombreseccion = :p2 
                GROUP BY e.numeroexpediente
                ORDER BY total DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , true);
        $query->setParameter('p2' , $seccion);

        /** @noinspection OneTimeUseVariablesInspection */
        $expedientesSecciones = $query->getResult();


        return $expedientesSecciones;

    }

    public function graficoExpedientesServicios($servicio)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.numeroexpediente, pse.importesolicitado as cantidad
                FROM AppBundle:Presupuestosserviciosexpedientes pse 
                LEFT JOIN pse.expediente e
                LEFT JOIN pse.presupuestoservicio ps
                LEFT JOIN ps.servicio s
                WHERE e.activo = :p1 
                AND s.nombreservicio = :p2 
                ORDER BY cantidad DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , true);
        $query->setParameter('p2' , $servicio);

        /** @noinspection OneTimeUseVariablesInspection */
        $expedientesServicios = $query->getResult();


        return $expedientesServicios;

    }


}
