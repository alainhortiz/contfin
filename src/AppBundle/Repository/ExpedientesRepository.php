<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Expedientes;

/**
 * ExpedientesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpedientesRepository extends \Doctrine\ORM\EntityRepository
{
    public function agregarExpediente($data , $user)
    {
        try{
            $em = $this->getEntityManager();
            $expediente = new Expedientes();
            $numero = $this->getNextNumeroExpediente();
            $expediente->setNumeroexpediente($numero);
            $expediente->setFechaentrada(new \DateTime($data['fechaEntrada']));
            $expediente->setBeneficiario($data['beneficiario']);
            $expediente->setImportesolicitado($data['montoSolicitado']);
            $expediente->setResumen($data['resumen']);
            $expediente->setDescripcion($data['descripcion']);
            $expediente->setObservacion($data['observaciones']);
            $expediente->setMandamientopago(false);
            $expediente->setActivo(true);
            $ubicacion = $this->getNextUbicacionArchivo();
            $expediente->setUbicacionarchivo($ubicacion);
            $data['prioritario'] == '0' ? $expediente->setPrioridad(false) : $expediente->setPrioridad(true);
            $expediente->setUsuario($user);

            $seccion = $em->getRepository('AppBundle:Secciones')->findOneBy(array('nombreseccion' => $data['nombreSeccion']));
            $expediente->setSeccion($seccion);

            $estado = $em->getRepository('AppBundle:Estadosexpedientes')->findOneBy(array('nombreestado' => 'CREADO'));
            $estadoExpIntancia = $em->getRepository('AppBundle:Estadosexpedientesinstancias')->findOneBy(array('estadoexpediente' => $estado , 'instancia' => $user->getInstancia()));
            if(!$estadoExpIntancia) return 'No existe la relacion entre el estado CREADO  y la instancia  a la que pertenece este usuario ';
            $expediente->setEstadoexpedienteinstancia($estadoExpIntancia);

            if($seccion->getNombreseccion() == 'ASUNTOS EXTERIORES Y COOPERACION' or $seccion->getNombreseccion() == 'DEFENSA NACIONAL' or $seccion->getNombreseccion() == 'SEGURIDAD NACIONAL')
            {
                $expediente->setPrioridad(true);
            }

            $em->persist($expediente);
            $em->flush();
            $msg = $expediente;

        }catch (\Exception $e){

            $msg = 'Se produjo un error al insertar el expediente';
        }
        return $msg;
    }

    public function modificarExpediente($data , $user)
    {
        try{
            $em = $this->getEntityManager();
            $expediente = $em->getRepository('AppBundle:Expedientes')->find($data['idExpediente']);
            $expediente->setBeneficiario($data['beneficiario']);
            $expediente->setImportesolicitado($data['montoSolicitado']);
            $expediente->setResumen($data['resumen']);
            $expediente->setDescripcion($data['descripcion']);
            $expediente->setObservacion($data['observaciones']);
            $expediente->setActivo(true);
            $expediente->setMandamientopago(false);
            $expediente->setUbicacionarchivo($data['ubicacionArchivo']);
            $data['prioritario'] == '0' ? $expediente->setPrioridad(false) : $expediente->setPrioridad(true);
            $expediente->setUsuario($user);

            $seccion = $em->getRepository('AppBundle:Secciones')->findOneBy(array('nombreseccion' => $data['nombreSeccion']));
            $expediente->setSeccion($seccion);

            $em->getRepository('AppBundle:Expedientes')->cambiarEstadoExpedienteInstancia($expediente , $user->getInstancia() , 'CREADO');

            $em->persist($expediente);
            $em->flush();
            $msg = $expediente;

        }catch (\Exception $e){

            $msg = 'Se produjo un error al modificar el expediente';
        }
        return $msg;
    }

    public function buscarExpediente($data)
    {
        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }


            $dql = "SELECT e FROM AppBundle:Expedientes e LEFT JOIN e.seccion s LEFT JOIN e.estadoexpedienteinstancia eei LEFT JOIN eei.estadoexpediente ee 
                     WHERE e.fechaentrada >= '" .$fechaInicial. "' AND e.fechaentrada < '".$fechaFinal."'";

            // No. de expediente
            if($data['numeroExpediente'] !=='') {

                $arreglo = explode('-', $data['numeroExpediente']);
                $numero  = count($arreglo) == 1 ? $arreglo[0] : $arreglo[1];

                $dql .= " AND e.numeroexpediente= " . $numero;
            }

            // Importe solicitado
            if($data['importeSolicitado'] !='') {
                if ($data['operacion'] !='') {
                    if ($data['operacion'] =='<') {
                        $dql .= " AND e.importesolicitado <= " . $data['importeSolicitado'];
                    }
                    elseif ($data['operacion'] =='=') {
                        $dql .= " AND e.importesolicitado = " . $data['importeSolicitado'];
                    }
                    else {
                        $dql .= " AND e.importesolicitado >= " . $data['importeSolicitado'];
                    }
                }
                else
                {
                    $dql .= " AND e.importesolicitado= " . $data['importeSolicitado'];
                }

            }

            // Administrador del crédito
            if($data['seccion'] !=='') {
                $dql .= " AND s.id= " . $data['seccion'];
            }

            // Estado del expediente
            if($data['estadoExpediente'] !=='') {
                $dql .= " AND ee.id= " . $data['estadoExpediente'];
            }

            // Beneficiario
            if($data['beneficiario'] !=='') {
                $dql .= " AND upper(e.beneficiario)  LIKE '%" . strtoupper( $data['beneficiario']) . "%'";
            }
            // No. de registro
            if($data['numeroRegistro'] !=='') {

                $dql .= " AND EXISTS (SELECT reg FROM AppBundle:Registrosexpedientes reg JOIN reg.expediente exp WHERE exp.id=e.id AND reg.numeroregistro= '". $data['numeroRegistro']."')";
            }

            if($data['numeroEconomico'] !=='' and $data['servicio'] !=='')
            {
                //partida ( NE + Servicio)
                $dql .= " AND EXISTS (SELECT pse FROM AppBundle:Presupuestosserviciosexpedientes pse LEFT JOIN pse.expediente ex LEFT JOIN pse.presupuestoservicio ps 
                          LEFT JOIN ps.numeroeconomico ne LEFT JOIN ps.servicio serv
                          WHERE ex.id=e.id AND ne.id=" . $data['numeroEconomico'] . " AND serv.id=" . $data['servicio'] . ")";

            }else{
                // Número económico
                if($data['numeroEconomico'] !=='') {
                    $dql .= " AND EXISTS (SELECT pse FROM AppBundle:Presupuestosserviciosexpedientes pse LEFT JOIN pse.expediente ex LEFT JOIN pse.presupuestoservicio ps LEFT JOIN ps.numeroeconomico ne 
                              WHERE ex.id=e.id AND ne.id=" . $data['numeroEconomico'] .")";
                }

                // Servicio
                if($data['servicio'] !=='') {
                    $dql .= " AND EXISTS (SELECT pse FROM AppBundle:Presupuestosserviciosexpedientes pse LEFT JOIN pse.expediente ex LEFT JOIN pse.presupuestoservicio ps LEFT JOIN ps.servicio serv 
                             WHERE ex.id=e.id AND serv.id=" . $data['servicio'] .")";
                }
            }

            $query = $em->createQuery($dql);
            $expedientes = $query->getResult();

        }catch (\Exception $e)
        {
            $expedientes = 'Se produjo un error al realizar la busqueda';
        }

        if(count($expedientes) == 0) return 'No se encontraron registros en la busqueda';
        else return $expedientes ;
    }

    public function buscarExpedientesDuplicados($data)
    {
        try{
            $em = $this->getEntityManager();

            $stringIdsPresupuestos = '';
            $i = 1;
            foreach ($data['partidas'] as $partida)
            {
                if($partida !== '')
                {
                    $servicio = $em->getRepository('AppBundle:Servicios')->find($partida['servicio']);
                    $numeroEconomico = $em->getRepository('AppBundle:Numeroseconomicos')->find($partida['numeroEconomico']);
                    $presupuestoServicio = $em->getRepository('AppBundle:Presupuestosservicios')->findOneBy(array('servicio' => $servicio , 'numeroeconomico' => $numeroEconomico));
                    if( $i != count($data['partidas'])) $stringIdsPresupuestos .= $presupuestoServicio->getId().",";
                    else $stringIdsPresupuestos .= $presupuestoServicio->getId();
                }
                $i++;
            }

            $stringIdsRegistros = '';
            foreach ($data['registros'] as $registro)
            {
                $ministerio = $em->getRepository('AppBundle:Ministerios')->find($registro['ministerio']);
                $registrosExpedientes = $em->getRepository('AppBundle:Registrosexpedientes')->findBy(array('numeroregistro' => $registro['numeroRegistro'] , 'ministerio' => $ministerio));
                foreach ($registrosExpedientes as $registroExpediente)
                {
                    if( $registroExpediente ) $stringIdsRegistros .= $registroExpediente->getId().",";
                }
            }
            if($stringIdsRegistros != '')
            {
                $stringIdsRegistros =  substr($stringIdsRegistros , 0 , -1);
                $dql = "SELECT e  FROM AppBundle:Expedientes e JOIN e.registros r JOIN e.partidas  pse JOIN pse.presupuestoservicio ps 
                        WHERE  (ps.id IN (".$stringIdsPresupuestos.")) AND (r.id IN (".$stringIdsRegistros.")) ORDER BY e.id" ;
                $query = $em->createQuery($dql);
                $expedientes = $query->getResult();
            }
            else $expedientes = [];

        }catch (\Exception $e)
        {
            $expedientes = 'Se produjo un error al buscar los expedientes duplicados';
        }
        return $expedientes ;
    }

    public function listarExpedientes($user)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i  
                WHERE  i.id = :instancia AND e.activo = true 
                ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function listarExpedientesPorInstancia($instancia)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.instancia i  WHERE  i.id = :instancia AND e.activo = true
                ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' , $instancia);
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function listarExpedientesPorSupervisar($instancia)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE   es.nombreestado = 'POR SUPERVISAR' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false 
                ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' , $instancia);

        $expedientes = $query->getResult();
        return $expedientes;
    }

    public function listarExpedientesPorProcesar($instancia)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE   (es.nombreestado = 'POR PROCESAR' OR es.nombreestado = 'CREADO') AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false 
                ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' , $instancia);

        $expedientes = $query->getResult();
        return $expedientes;
    }

    public function listarExpedientesEnProceso($user)
    {
        $em = $this->getEntityManager();
        $role = $em->getRepository('AppBundle:Role')->findOneBy(array('nombre' => 'ROLE_SUPERVISOR'));
        if($user->getUsuarioRoles()->contains($role))
        {
            $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE   es.nombreestado = 'EN PROCESO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false 
                ORDER BY e.numeroexpediente";
            $query = $em->createQuery($dql);
            $query->setParameter('instancia' , $user->getInstancia()->getId());
        }else{
            $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i JOIN e.usuario u
                WHERE   es.nombreestado = 'EN PROCESO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false AND u.id = :idUsuario
                ORDER BY e.numeroexpediente";
            $query = $em->createQuery($dql);
            $query->setParameter('instancia' , $user->getInstancia()->getId());
            $query->setParameter('idUsuario' , $user->getId());
        }

        $expedientes = $query->getResult();
        return $expedientes;
    }

    public function listarExpedientesDesestimados($instancia)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE   es.nombreestado = 'DESESTIMADO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false 
                ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' , $instancia);

        $expedientes = $query->getResult();
        return $expedientes;
    }

    public function listarExpedientesSinCredito($instancia)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  es.nombreestado = 'SIN CREDITO' AND i.id = :instancia AND e.activo = true 
                ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' , $instancia);

        $expedientes = $query->getResult();
        return $expedientes;
    }

    public function aprobarExpedienteInstancia($user , $expediente )
    {
        try{
            $em = $this->getEntityManager();
            $instancia = $user->getInstancia();
            $preorden = $instancia->getPreorden() != '6' ? $instancia->getPreorden() + 1 : '6';
            $instancia2 = $em->getRepository('AppBundle:Instancias')->findOneBy(array('preorden' => $preorden ));

            $em->getRepository('AppBundle:Expedientes')->cambiarEstadoExpedienteInstancia($expediente , $instancia2  , 'POR PROCESAR');

            $estado = $em->getRepository('AppBundle:Estadosexpedientes')->findOneBy(array('nombreestado' => 'APROBADO'));
            $estadoExpedienteInstancia = $em->getRepository('AppBundle:Estadosexpedientesinstancias')->findOneBy(array('estadoexpediente' => $estado , 'instancia' => $instancia));
            $historicoEstadoExpediente = $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $estadoExpedienteInstancia , $user);
            if($historicoEstadoExpediente != 'ok') return $historicoEstadoExpediente;
            $historicoEstadoExpediente2 = $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $expediente->getEstadoexpedienteinstancia() , $user);
            if($historicoEstadoExpediente2 != 'ok') return $historicoEstadoExpediente2;

            $msg = $expediente;


        }catch (\Exception $e){

            $msg = 'Se produjo un error al aprobar el expediente';
        }

        return $msg;
    }

    public function desestimarExpedienteInstancia($user , $expediente)
    {
        try{
            $em = $this->getEntityManager();
            $em->getRepository('AppBundle:Expedientes')->cambiarEstadoExpedienteInstancia($expediente , $user->getInstancia()  , 'DESESTIMADO');
            $historicoEstadoExpediente = $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $expediente->getEstadoexpedienteinstancia() , $user);
            if($historicoEstadoExpediente != 'ok') return $historicoEstadoExpediente;
            $msg = $expediente;

        }catch (\Exception $e){

            $msg = 'Se produjo un error al desestimar el expediente';
        }

        return $msg;
    }

    public function getNextNumeroExpediente()
    {
        $em = $this->getEntityManager();
        $actual = new \DateTime('now');
        $year = $actual->format('Y');

        $dql = "SELECT e.numeroexpediente FROM AppBundle:Expedientes e 
                WHERE e.fechaentrada >= ?1 ORDER BY e.numeroexpediente DESC";

        $query = $em->createQuery($dql);
        $query->setParameter(1 , '01/01/'.$year);
        $numero = $query->setMaxResults(1)->getResult();

        $lastNumeroExpediente = count($numero) == 0 ? 0 : $numero[0]['numeroexpediente'];

        return $lastNumeroExpediente + 1 ;
    }

    public function getNextUbicacionArchivo()
    {
        $nextNumeroExpediente =  $this->getNextNumeroExpediente();
        $numeroArchivo = $nextNumeroExpediente % 100 == 0 ?   floor($nextNumeroExpediente / 100)  : floor(($nextNumeroExpediente / 100) + 1);
        $max = $numeroArchivo * 100;
        $min = $max - 99;
        $ubicacion = 'CARPETA '.$min.' - '.$max;

        return $ubicacion;
    }

    public function listarFichaControl($idPresupuestoServicio , $idExpediente)
    {
        $em = $this->getEntityManager();
        $actual = new \DateTime('now');
        $year = $actual->format('Y');
        $dql = "SELECT e FROM AppBundle:Expedientes e JOIN e.partidas  pse JOIN pse.presupuestoservicio ps 
                WHERE  ps.id = :idPresupuesto AND e.fechaentrada >= ?1 AND e.id != :idExpediente";
        $query = $em->createQuery($dql);
        $query->setParameter(1 , '01/01/'.$year);
        $query->setParameter( 'idPresupuesto', $idPresupuestoServicio);
        $query->setParameter( 'idExpediente', $idExpediente);
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function regularizarExpediente($nombreSeccion , $expediente)
    {
        try{
            $em = $this->getEntityManager();

            $seccion = $em->getRepository('AppBundle:Secciones')->findOneBy(array('nombreseccion' => $nombreSeccion));
            $expediente->setSeccion($seccion);
            $msg = 'ok';
        }catch (\Exception $e){

            $msg = 'Se produjo un error al regularizar el expediente';
        }
        return $msg;
    }

    public function cambiarEstadoExpedienteInstancia($expediente , $instancia , $nombreEstado)
    {
        $em = $this->getEntityManager();
        $estado = $em->getRepository('AppBundle:Estadosexpedientes')->findOneBy(array('nombreestado' => $nombreEstado));
        $estadoExpedienteInstancia = $em->getRepository('AppBundle:Estadosexpedientesinstancias')->findOneBy(array('estadoexpediente' => $estado , 'instancia' => $instancia));
        $expediente->setEstadoexpedienteinstancia($estadoExpedienteInstancia);
        $expediente->setActivo(true);
        $em->persist($expediente);
        $em->flush();
    }

    public function datosExportListadoExpedientes()
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e.fechaentrada AS Fecha , e.numeroexpediente AS No , e.beneficiario AS Beneficiario , s.nombreseccion AS Administrador , es.nombreestado AS Estado , e.importesolicitado AS Monto
                FROM AppBundle:Expedientes e jOIN e.seccion s JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es 
                WHERE  e.activo = true ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function datosExportListadoExpedientesPorInstancia($idInstancia)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT e.fechaentrada AS Fecha , e.numeroexpediente AS No , e.beneficiario AS Beneficiario , s.nombreseccion AS Administrador , es.nombreestado AS Estado , e.importesolicitado AS Monto
                FROM AppBundle:Expedientes e jOIN e.seccion s  JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es JOIN eei.instancia i  
                WHERE  i.id = :instancia AND e.activo = true ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' , $idInstancia);
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function datosExportListadoExpedientesPorSupervisar($user)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e.fechaentrada AS Fecha , e.numeroexpediente AS No , e.beneficiario AS Beneficiario , s.nombreseccion AS Administrador , es.nombreestado AS Estado , e.importesolicitado AS Monto
                FROM AppBundle:Expedientes e jOIN e.seccion s JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  es.nombreestado = 'POR SUPERVISAR' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false 
                ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function datosExportListadoExpedientesPorProcesar($user)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e.fechaentrada AS Fecha , e.numeroexpediente AS No , e.beneficiario AS Beneficiario , s.nombreseccion AS Administrador , es.nombreestado AS Estado , e.importesolicitado AS Monto
                FROM AppBundle:Expedientes e jOIN e.seccion s JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  (es.nombreestado = 'POR PROCESAR' OR es.nombreestado = 'CREADO') AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false 
                ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function datosExportListadoExpedientesEnProceso($user)
    {
        $em = $this->getEntityManager();

        $role = $em->getRepository('AppBundle:Role')->findOneBy(array('nombre' => 'ROLE_SUPERVISOR'));
        if($user->getUsuarioRoles()->contains($role))
        {
            $dql = "SELECT e.fechaentrada AS Fecha , e.numeroexpediente AS No , e.beneficiario AS Beneficiario , s.nombreseccion AS Administrador , es.nombreestado AS Estado , e.importesolicitado AS Monto
                FROM AppBundle:Expedientes e jOIN e.seccion s JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  es.nombreestado = 'EN PROCESO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false 
                ORDER BY e.numeroexpediente";
            $query = $em->createQuery($dql);
            $query->setParameter('instancia' , $user->getInstancia()->getId());
        }else{
            $dql = "SELECT e.fechaentrada AS Fecha , e.numeroexpediente AS No , e.beneficiario AS Beneficiario , s.nombreseccion AS Administrador , es.nombreestado AS Estado , e.importesolicitado AS Monto
                FROM AppBundle:Expedientes e jOIN e.seccion s JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i JOIN e.usuario u
                WHERE  es.nombreestado = 'EN PROCESO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false AND u.id = :idUsuario
                ORDER BY e.numeroexpediente";
            $query = $em->createQuery($dql);
            $query->setParameter('instancia' , $user->getInstancia()->getId());
            $query->setParameter('idUsuario' , $user->getId());
        }

        $expedientes = $query->getResult();
        return $expedientes;
    }

    public function datosExportListadoExpedientesDesestimados($user)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e.fechaentrada AS Fecha , e.numeroexpediente AS No , e.beneficiario AS Beneficiario , s.nombreseccion AS Administrador , es.nombreestado AS Estado , e.importesolicitado AS Monto
                FROM AppBundle:Expedientes e jOIN e.seccion s JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  es.nombreestado = 'DESESTIMADO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false 
                ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function datosExportListadoExpedientesSinCredito($user)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e.fechaentrada AS Fecha , e.numeroexpediente AS No , e.beneficiario AS Beneficiario , s.nombreseccion AS Administrador , es.nombreestado AS Estado , e.importesolicitado AS Monto
                FROM AppBundle:Expedientes e jOIN e.seccion s JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  es.nombreestado = 'SIN CREDITO' AND i.id = :instancia AND e.activo = true ORDER BY e.numeroexpediente";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $user->getInstancia()->getId());
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function datosExportBuscadorExpedientes($data)
    {
        $em = $this->getEntityManager();
        if($data['fechaInicial'] !== ''){

            $inicial = new \DateTime($data['fechaInicial']);
            $fechaInicial = $inicial->format('Y-m-d');
        }else{
            $inicial = new \DateTime('01-01-0001');
            $fechaInicial = $inicial->format('Y-m-d');
        }
        if($data['fechaFinal'] !== ''){

            $actual = new \DateTime($data['fechaFinal']);
            $tomorrow = $actual->modify('+1 day');
            $fechaFinal = $tomorrow->format('Y-m-d');
        }else{
            $actual = new \DateTime('now');
            $tomorrow = $actual->modify('+1 day');
            $fechaFinal = $tomorrow->format('Y-m-d');
        }


        $dql = "SELECT e.fechaentrada AS Fecha , e.numeroexpediente AS No , e.beneficiario AS Beneficiario , s.nombreseccion AS Administrador , ee.nombreestado AS Estado , e.importesolicitado AS Monto 
                FROM AppBundle:Expedientes e LEFT JOIN e.seccion s LEFT JOIN e.estadoexpedienteinstancia eei LEFT JOIN eei.estadoexpediente ee 
                WHERE e.fechaentrada >= '" .$fechaInicial. "' AND e.fechaentrada < '".$fechaFinal."'";

        // No. de expediente
        if($data['numeroExpediente'] !=='') {

            $arreglo = explode('-', $data['numeroExpediente']);
            $numero  = count($arreglo) == 1 ? $arreglo[0] : $arreglo[1];

            $dql .= " AND e.numeroexpediente= " . $numero;
        }

        // Importe solicitado
        if($data['importeSolicitado'] !='') {
            if ($data['operacion'] !='') {
                if ($data['operacion'] =='<') {
                    $dql .= " AND e.importesolicitado <= " . $data['importeSolicitado'];
                }
                elseif ($data['operacion'] =='=') {
                    $dql .= " AND e.importesolicitado = " . $data['importeSolicitado'];
                }
                else {
                    $dql .= " AND e.importesolicitado >= " . $data['importeSolicitado'];
                }
            }
            else
            {
                $dql .= " AND e.importesolicitado= " . $data['importeSolicitado'];
            }

        }

        // Administrador del crédito
        if($data['seccion'] !=='') {
            $dql .= " AND s.id= " . $data['seccion'];
        }

        // Estado del expediente
        if($data['estadoExpediente'] !=='') {
            $dql .= " AND ee.id= " . $data['estadoExpediente'];
        }

        // Beneficiario
        if($data['beneficiario'] !=='') {
            $dql .= " AND upper(e.beneficiario)  LIKE '%" . strtoupper( $data['beneficiario']) . "%'";
        }

        if($data['numeroEconomico'] !=='' and $data['servicio'] !=='')
        {
            //partida ( NE + Servicio)
            $dql .= " AND EXISTS (SELECT pse FROM AppBundle:Presupuestosserviciosexpedientes pse LEFT JOIN pse.expediente ex LEFT JOIN pse.presupuestoservicio ps 
                          LEFT JOIN ps.numeroeconomico ne LEFT JOIN ps.servicio serv
                          WHERE ex.id=e.id AND ne.id=" . $data['numeroEconomico'] . " AND serv.id=" . $data['servicio'] . ")";

        }else{
            // Número económico
            if($data['numeroEconomico'] !=='') {
                $dql .= " AND EXISTS (SELECT pse FROM AppBundle:Presupuestosserviciosexpedientes pse LEFT JOIN pse.expediente ex LEFT JOIN pse.presupuestoservicio ps LEFT JOIN ps.numeroeconomico ne WHERE ex.id=e.id AND ne.id=" . $data['numeroEconomico'] .")";
            }

            // Servicio
            if($data['servicio'] !=='') {
                $dql .= " AND EXISTS (SELECT pse FROM AppBundle:Presupuestosserviciosexpedientes pse LEFT JOIN pse.expediente ex LEFT JOIN pse.presupuestoservicio ps LEFT JOIN ps.servicio serv WHERE ex.id=e.id AND serv.id=" . $data['servicio'] .")";
            }
        }

        $query = $em->createQuery($dql);
        $expedientes = $query->getResult();

        return $expedientes;
    }

    public function ponerExpedienteSinCredito($idExpediente , $user)
    {
        try{
            $em = $this->getEntityManager();
            $expediente = $em->getRepository('AppBundle:Expedientes')->find($idExpediente);

            $em->getRepository('AppBundle:Expedientes')->cambiarEstadoExpedienteInstancia($expediente , $user->getInstancia()  , 'SIN CREDITO');
            $historicoEstadoExpediente = $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $expediente->getEstadoexpedienteinstancia() , $user);
            if($historicoEstadoExpediente != 'ok') return $historicoEstadoExpediente;
            $msg = $expediente;

        }catch (\Exception $e){

            $msg = 'Se produjo un error al declara el expediente oomo expediente sin crédito';
        }

        return $msg;
    }

    public function totalListadoExpediente()
    {
        $em = $this->getEntityManager();

        $dql = "SELECT SUM(e.importesolicitado) FROM AppBundle:Expedientes e WHERE  e.activo = true";
        $query = $em->createQuery($dql);
        $total = $query->getResult();

        return $total[0][1];
    }

    public function totalListadoExpedientePorSupervisar($instancia)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT SUM(e.importesolicitado) FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  es.nombreestado = 'POR SUPERVISAR' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $instancia);
        $total = $query->getResult();

        return $total[0][1];
    }

    public function totalListadoExpedientePorProcesar($instancia)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT SUM(e.importesolicitado) FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  (es.nombreestado = 'POR PROCESAR' OR es.nombreestado = 'CREADO') AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $instancia);
        $total = $query->getResult();

        return $total[0][1];
    }

    public function totalListadoExpedienteEnProceso($user)
    {
        $em = $this->getEntityManager();

        $role = $em->getRepository('AppBundle:Role')->findOneBy(array('nombre' => 'ROLE_SUPERVISOR'));
        if($user->getUsuarioRoles()->contains($role))
        {
            $dql = "SELECT SUM(e.importesolicitado) FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  es.nombreestado = 'EN PROCESO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false";
            $query = $em->createQuery($dql);
            $query->setParameter('instancia' , $user->getInstancia()->getId());
        }else{
            $dql = "SELECT SUM(e.importesolicitado) FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i JOIN e.usuario u
                WHERE  es.nombreestado = 'EN PROCESO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false AND u.id = :idUsuario";
            $query = $em->createQuery($dql);
            $query->setParameter('instancia' , $user->getInstancia()->getId());
            $query->setParameter('idUsuario' , $user->getId());
        }

        $total = $query->getResult();
        return $total[0][1];
    }

    public function totalListadoExpedienteDesestimados($instancia)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT SUM(e.importesolicitado) FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  es.nombreestado = 'DESESTIMADO' AND i.id = :instancia AND e.activo = true AND e.mandamientopago = false";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $instancia);
        $total = $query->getResult();

        return $total[0][1];
    }

    public function totalListadoExpedienteSinCredito($instancia)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT SUM(e.importesolicitado) FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  es.nombreestado = 'SIN CREDITO' AND i.id = :instancia AND e.activo = true ";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $instancia);
        $total = $query->getResult();

        return $total[0][1];
    }

    public function totalListadoExpedientePorInstancia($instancia)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT SUM(e.importesolicitado) FROM AppBundle:Expedientes e JOIN e.estadoexpedienteinstancia eei JOIN eei.estadoexpediente es  JOIN eei.instancia i
                WHERE  i.id = :instancia AND e.activo = true";
        $query = $em->createQuery($dql);
        $query->setParameter('instancia' ,  $instancia);
        $total = $query->getResult();

        return $total[0][1];
    }

    public function desactivarExpedientes()
    {
        $em = $this->getEntityManager();
        $expedientes = $em->getRepository('AppBundle:Expedientes')->findBy(array('activo' => true));
        foreach ($expedientes as $expediente){
            $expediente->setActivo(false);
            $em->persist($expediente);
        }
        $em->flush();
    }

    //funciones para la concurrencia
    public function reservarExpediente($expediente , $user)
    {
        $em = $this->getEntityManager();
        $expediente->setUsuario($user);
        $em->persist($expediente);
        $em->flush();
        $this->cambiarEstadoExpedienteInstancia($expediente , $expediente->getEstadoexpedienteinstancia()->getInstancia() , 'EN PROCESO');
        $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $expediente->getEstadoexpedienteinstancia() , $user);
    }

    public function liberarExpediente($expediente , $user)
    {
        $em = $this->getEntityManager();
        $this->cambiarEstadoExpedienteInstancia($expediente , $expediente->getEstadoexpedienteinstancia()->getInstancia() , 'POR PROCESAR');
        $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $expediente->getEstadoexpedienteinstancia() , $user);
    }

    public function finalizarExpediente($expediente , $user)
    {
        $em = $this->getEntityManager();
        $this->cambiarEstadoExpedienteInstancia($expediente , $expediente->getEstadoexpedienteinstancia()->getInstancia() , 'POR SUPERVISAR');
        $em->getRepository('AppBundle:Historicosestadosexpedientes')->agregarHistoricoEstadoExpediente($expediente, $expediente->getEstadoexpedienteinstancia() , $user);
    }


    //funciones de graficos
    public function graficoExpedientesEstados()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT ee.nombreestado as estado,COUNT(e) as cantidad 
                FROM AppBundle:Expedientes e 
                LEFT JOIN e.estadoexpedienteinstancia eei 
                LEFT JOIN eei.estadoexpediente ee
                WHERE e.activo = :p1 
                GROUP BY ee.nombreestado 
                ORDER BY cantidad DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , true);

        /** @noinspection OneTimeUseVariablesInspection */
        $estados = $query->getResult();

        return $estados;

    }

    public function graficoTotalActivos()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad 
                FROM AppBundle:Expedientes e 
                WHERE e.activo = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , true);

        $activos = $query->getResult();

        return $activos[0]['cantidad'];

    }

    public function graficoTotalPrioridad()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad 
                FROM AppBundle:Expedientes e  
                WHERE e.activo = :p1 
                AND e.prioridad = :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , true);
        $query->setParameter('p2' , true);

        $prioridad = $query->getResult();

        return $prioridad[0]['cantidad'];

    }

    public function graficoTotalMandamientoPago()
    {

        $em = $this->getEntityManager();

        $actual = new \DateTime('now');
        $year = $actual->format('Y-01-01');

        $dql = 'SELECT e.id, MAX(mpe.id) as cantidad 
                FROM AppBundle:Expedientes e 
                LEFT JOIN e.mandamientosPagos mpe
                WHERE mpe.fechamandamientopago >= :p1 
                AND e.mandamientopago = :p2
                GROUP BY e.id';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $year);
        $query->setParameter('p2' , true);

        $mandamientoPago = $query->getResult();

        return count($mandamientoPago);

    }

    public function actividadesHoy()
    {

        $em = $this->getEntityManager();

        $actual = new \DateTime('now');
        $tomorrow = $actual->modify('+1 day');
        $fechaHoy = $tomorrow->format('Y-m-d');
        $year = $actual->format('Y-01-01');

        $dql = 'SELECT i.id,i.nombreinstancia as instancia, ee.nombreestado as estado ,COUNT(e) as total 
                FROM AppBundle:Expedientes e 
                LEFT JOIN e.estadoexpedienteinstancia eei 
                LEFT JOIN eei.instancia i 
                LEFT JOIN eei.estadoexpediente ee
                WHERE e.fechaentrada >= :p1 
                AND e.fechaentrada <= :p2 
                AND e.activo = :p3 
                GROUP BY i.id,i.nombreinstancia,ee.nombreestado';


        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $year);
        $query->setParameter('p2' , $fechaHoy);
        $query->setParameter('p3' , true);


        /** @noinspection OneTimeUseVariablesInspection */
        $expedientes = $query->getResult();


        return $expedientes;

    }

    public function actividadesFecha($fecha1,$fecha2)
    {

        $em = $this->getEntityManager();

        $actual = new \DateTime('now');

        if($fecha1 != ''){

            $inicial = new \DateTime($fecha1);
            $fechaInicial = $inicial->format('Y-m-d');
        }else{
            $fechaInicial = $actual->format('Y-01-01');
        }
        if($fecha2 != ''){

            $actual = new \DateTime($fecha2);
            $tomorrow = $actual->modify('+1 day');
            $fechaFinal = $tomorrow->format('Y-m-d');
        }else{
            $tomorrow = $actual->modify('+1 day');
            $fechaFinal = $tomorrow->format('Y-m-d');
        }


        $dql = 'SELECT i.id,i.nombreinstancia as instancia, ee.nombreestado as estado ,COUNT(e) as total 
                FROM AppBundle:Expedientes e 
                LEFT JOIN e.estadoexpedienteinstancia eei 
                LEFT JOIN eei.instancia i 
                LEFT JOIN eei.estadoexpediente ee
                WHERE e.fechaentrada >= :p1 
                AND e.fechaentrada <= :p2 
                AND e.activo = :p3 
                GROUP BY i.id,i.nombreinstancia,ee.nombreestado';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , $fechaInicial);
        $query->setParameter('p2' , $fechaFinal);
        $query->setParameter('p3' , true);


        /** @noinspection OneTimeUseVariablesInspection */
        $expedientes = $query->getResult();


        return $expedientes;

    }

    public function graficoInstancias($estado)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT i.nombreinstancia as instancia,COUNT(e) as cantidad 
                FROM AppBundle:Expedientes e 
                LEFT JOIN e.estadoexpedienteinstancia eei 
                LEFT JOIN eei.instancia i 
                LEFT JOIN eei.estadoexpediente ee
                WHERE e.activo = :p1 
                AND ee.nombreestado = :p2
                GROUP BY i.nombreinstancia
                ORDER BY cantidad DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , true);
        $query->setParameter('p2' , $estado);

        /** @noinspection OneTimeUseVariablesInspection */
        $instancias = $query->getResult();

        return $instancias;

    }

    public function graficoExpedientesMontos($tipo)
    {
        $em = $this->getEntityManager();

        $actual = new \DateTime('now');
        $year = $actual->format('Y-01-01');

        if ($tipo==='Activos') {
            $dql = 'SELECT e.numeroexpediente, e.importesolicitado as total
                FROM AppBundle:Expedientes e
                WHERE e.activo = :p1
                ORDER BY total DESC';
        } elseif ($tipo==='Priorizados') {
            $dql = 'SELECT e.numeroexpediente, e.importesolicitado as total
                FROM AppBundle:Expedientes e
                WHERE e.activo = :p1
                AND e.prioridad = true
                ORDER BY total DESC';
        } elseif ($tipo==='Mandamiento de pago') {
            $dql = "SELECT e.numeroexpediente, mpe.importemandamientopago as total, MAX(mpe.id) 
                FROM AppBundle:Expedientes e 
                LEFT JOIN e.mandamientosPagos mpe
                WHERE mpe.fechamandamientopago >= '". $year. "'
                AND e.mandamientopago = :p1
                GROUP BY e.numeroexpediente, mpe.importemandamientopago";
        }

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , true);

        /** @noinspection OneTimeUseVariablesInspection */
        $montos = $query->setMaxResults(1000)->getResult();

        return $montos;

    }

    public function graficoExpedienteInstancias($expediente)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT i.nombreinstancia as instancia, ee.nombreestado as estado, hee.fecha
                FROM AppBundle:Historicosestadosexpedientes hee 
                LEFT JOIN hee.expediente e 
                LEFT JOIN hee.estado eei 
                LEFT JOIN eei.instancia i 
                LEFT JOIN eei.estadoexpediente ee
                WHERE e.activo = :p1  
                AND e.numeroexpediente = :p2
                ORDER BY i.preorden ASC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , true);
        $query->setParameter('p2' , $expediente);

        /** @noinspection OneTimeUseVariablesInspection */
        $instanciasExpediente = $query->getResult();

        return $instanciasExpediente;

    }

    public function graficoInstanciaExpedientes($instancia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT e.numeroexpediente, e.importesolicitado as total
                FROM AppBundle:Expedientes e
                LEFT JOIN e.estadoexpedienteinstancia eei 
                LEFT JOIN eei.instancia i 
                WHERE e.activo = :p1  
                AND i.nombreinstancia = :p2
                ORDER BY total DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1' , true);
        $query->setParameter('p2' , $instancia);

        /** @noinspection OneTimeUseVariablesInspection */
        $instanciasExpediente = $query->setMaxResults(1000)->getResult();

        return $instanciasExpediente;

    }


}
